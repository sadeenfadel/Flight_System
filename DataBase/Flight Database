--------------------------------------------------------
--  File created - Friday-November-22-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table ABOUTUS
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."ABOUTUS" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ABOUTTITLE" VARCHAR2(255 BYTE), 
	"ABOUTCONTENT" VARCHAR2(500 BYTE), 
	"ABOUTIMAGE" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AIRLINES
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."AIRLINES" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"AIRLINENAME" VARCHAR2(255 BYTE), 
	"AIRLINEIMAGE" VARCHAR2(255 BYTE), 
	"AIRLINEEMAIL" VARCHAR2(255 BYTE), 
	"AIRLINEADDRESS" VARCHAR2(255 BYTE), 
	"ACTIVATIONSTATUS" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AIRPORT
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."AIRPORT" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"AIRPORTNAME" VARCHAR2(255 BYTE), 
	"IATACODE" VARCHAR2(10 BYTE), 
	"LONGITUDE" NUMBER, 
	"LATITUDE" NUMBER, 
	"AIRPORTIMAGE" VARCHAR2(255 BYTE), 
	"CITYID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BANK
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."BANK" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CARDNUMBER" NUMBER, 
	"CVV" NUMBER, 
	"EXPIRYDATE" DATE, 
	"BALANCE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CITY
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."CITY" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CITYNAME" VARCHAR2(255 BYTE), 
	"CITYIMAGE" VARCHAR2(255 BYTE), 
	"COUNTRYID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CONTACTUS
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."CONTACTUS" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CONTACTEMAIL" VARCHAR2(255 BYTE), 
	"CONTACTPHONE" VARCHAR2(50 BYTE), 
	"CONTACTADDRESS" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CONTACT_MESSAGES
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."CONTACT_MESSAGES" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FIRSTNAME" VARCHAR2(255 BYTE), 
	"LASTNAME" VARCHAR2(255 BYTE), 
	"EMAIL" VARCHAR2(255 BYTE), 
	"MESSAGE" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("MESSAGE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW 4000 CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 262144 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table COUNTRY
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."COUNTRY" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"COUNTRYNAME" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DEGREE
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."DEGREE" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"DEGREENAME" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DEGREE_FACILITIES
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."DEGREE_FACILITIES" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"DEGREEID" NUMBER, 
	"FACILITYID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FACILITY
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."FACILITY" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FACILITYNAME" VARCHAR2(255 BYTE), 
	"FACILITYIMAGE" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FLIGHT
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."FLIGHT" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FLIGHTNUMBER" VARCHAR2(255 BYTE), 
	"CAPACITY" NUMBER, 
	"PRICEPERPASSENGER" NUMBER, 
	"DEPARTUREDATE" DATE, 
	"DESTINATIONDATE" DATE, 
	"STATUS" VARCHAR2(50 BYTE), 
	"DISCOUNTVALUE" NUMBER, 
	"AIRLINEID" NUMBER, 
	"DEPARTUREAIRPORTID" NUMBER, 
	"DESTINATIONAIRPORTID" NUMBER, 
	"DEGREEID" NUMBER, 
	"PRICEAFTERDISCOUNT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table HOME
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."HOME" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"HOMETITLE" VARCHAR2(255 BYTE), 
	"HOMECONTENT" VARCHAR2(255 BYTE), 
	"HOMEIMAGE" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LOGIN
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."LOGIN" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USERNAME" VARCHAR2(255 BYTE), 
	"PASSWORD" VARCHAR2(255 BYTE), 
	"ROLEID" NUMBER, 
	"USERID" NUMBER, 
	"AIRLINEID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PARTNER
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."PARTNER" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FIRSTNAME" VARCHAR2(255 BYTE), 
	"LASTNAME" VARCHAR2(255 BYTE), 
	"NATIONALNUMBER" VARCHAR2(50 BYTE), 
	"USERID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table RESERVATION
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."RESERVATION" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"RESERVATIONDATE" DATE, 
	"TOTALPRICE" NUMBER, 
	"NUMOFPASSENGERS" NUMBER, 
	"USERID" NUMBER, 
	"FLIGHTID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ROLE
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."ROLE" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ROLENAME" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TESTIMONIAL
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."TESTIMONIAL" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TESTIMONIALCONTENT" VARCHAR2(255 BYTE), 
	"RATING" NUMBER, 
	"TESTIMONIALDATE" DATE, 
	"TESTIMONIALSTATUS" VARCHAR2(50 BYTE), 
	"USERID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "C##FLIGHT"."USERS" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FIRSTNAME" VARCHAR2(255 BYTE), 
	"LASTNAME" VARCHAR2(255 BYTE), 
	"EMAIL" VARCHAR2(255 BYTE), 
	"PHONE" VARCHAR2(50 BYTE), 
	"DATEOFBIRTH" DATE, 
	"IMAGE" VARCHAR2(255 BYTE), 
	"NATIONALNUMBER" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into C##FLIGHT.ABOUTUS
SET DEFINE OFF;
Insert into C##FLIGHT.ABOUTUS (ID,ABOUTTITLE,ABOUTCONTENT,ABOUTIMAGE) values (1,'About Us','Welcome to our Flight System! Our mission is to provide travelers with real-time information about flights, ensuring you stay informed and connected throughout your journey. With our user-friendly platform, you can easily track flight statuses, departure and arrival times, and receive updates on any changes. Thank you for choosing Our Website-your trusted companion in air travel!','10d13c2a-dec0-48a5-996d-70156d8f7149_hero-slider-2.jpg');
REM INSERTING into C##FLIGHT.AIRLINES
SET DEFINE OFF;
Insert into C##FLIGHT.AIRLINES (ID,AIRLINENAME,AIRLINEIMAGE,AIRLINEEMAIL,AIRLINEADDRESS,ACTIVATIONSTATUS) values (61,'feras','4a8670dd-34a6-415e-b389-adfdfef4a3b6_Screenshot 2023-10-29 191532.png','feras@huhv','wrfwfgw','Approved');
Insert into C##FLIGHT.AIRLINES (ID,AIRLINENAME,AIRLINEIMAGE,AIRLINEEMAIL,AIRLINEADDRESS,ACTIVATIONSTATUS) values (3,'Royal Jordanian Airlines','84f6e2cf-6aa5-45c9-a15d-c8952719573e_download.png','contact@rj.com','Queen Alia International Airport, Amman, Jordan','Approved');
Insert into C##FLIGHT.AIRLINES (ID,AIRLINENAME,AIRLINEIMAGE,AIRLINEEMAIL,AIRLINEADDRESS,ACTIVATIONSTATUS) values (4,'Kuwait Airways','Kuwait Airways.jpeg','info@kuwaitairways.com','Kuwait International Airport, Kuwait','Approved');
Insert into C##FLIGHT.AIRLINES (ID,AIRLINENAME,AIRLINEIMAGE,AIRLINEEMAIL,AIRLINEADDRESS,ACTIVATIONSTATUS) values (5,'Saudi Arabian Airlines','saudi_arabian_image.jpg','info@saudia.com','King Abdulaziz International Airport, Jeddah, Saudi Arabia','Approved');
Insert into C##FLIGHT.AIRLINES (ID,AIRLINENAME,AIRLINEIMAGE,AIRLINEEMAIL,AIRLINEADDRESS,ACTIVATIONSTATUS) values (21,'Moroco Airlines','ebd676bb-de63-4339-a88c-bfc943a34558_moroco.png','Moroco@hotmail.com','Moroco','Approved');
REM INSERTING into C##FLIGHT.AIRPORT
SET DEFINE OFF;
Insert into C##FLIGHT.AIRPORT (ID,AIRPORTNAME,IATACODE,LONGITUDE,LATITUDE,AIRPORTIMAGE,CITYID) values (61,'Mosco Airport','SVO',37.4146,55.9728,'60b0e7ea-1851-48bf-90a7-99188ee92b49_Screenshot 2023-10-29 191532.png',61);
Insert into C##FLIGHT.AIRPORT (ID,AIRPORTNAME,IATACODE,LONGITUDE,LATITUDE,AIRPORTIMAGE,CITYID) values (4,'Queen Alia International Airport','AMM',35.9936,31.7225,'amman_image.jpg',1);
Insert into C##FLIGHT.AIRPORT (ID,AIRPORTNAME,IATACODE,LONGITUDE,LATITUDE,AIRPORTIMAGE,CITYID) values (5,'Kuwait International Airport','KWI',47.9815,29.2269,'kuwait_image.jpg',3);
Insert into C##FLIGHT.AIRPORT (ID,AIRPORTNAME,IATACODE,LONGITUDE,LATITUDE,AIRPORTIMAGE,CITYID) values (6,'King Abdulaziz International Airport','JED',39.1566,21.6702,'jeddah_image.jpg',2);
REM INSERTING into C##FLIGHT.BANK
SET DEFINE OFF;
Insert into C##FLIGHT.BANK (ID,CARDNUMBER,CVV,EXPIRYDATE,BALANCE) values (43,12345678901,123,to_date('28-NOV-24','DD-MON-RR'),1985);
Insert into C##FLIGHT.BANK (ID,CARDNUMBER,CVV,EXPIRYDATE,BALANCE) values (21,1234567890,123,to_date('31-AUG-25','DD-MON-RR'),1303);
Insert into C##FLIGHT.BANK (ID,CARDNUMBER,CVV,EXPIRYDATE,BALANCE) values (41,987654321,123,to_date('31-AUG-25','DD-MON-RR'),800);
REM INSERTING into C##FLIGHT.CITY
SET DEFINE OFF;
Insert into C##FLIGHT.CITY (ID,CITYNAME,CITYIMAGE,COUNTRYID) values (1,'Amman','ny_image.jpg',1);
Insert into C##FLIGHT.CITY (ID,CITYNAME,CITYIMAGE,COUNTRYID) values (2,'Jeddah','toronto_image.jpg',2);
Insert into C##FLIGHT.CITY (ID,CITYNAME,CITYIMAGE,COUNTRYID) values (3,'Kuwait','berlin_image.jpg',3);
Insert into C##FLIGHT.CITY (ID,CITYNAME,CITYIMAGE,COUNTRYID) values (22,'Irbid','Irbid.jpg',1);
Insert into C##FLIGHT.CITY (ID,CITYNAME,CITYIMAGE,COUNTRYID) values (41,'Manamah',null,21);
Insert into C##FLIGHT.CITY (ID,CITYNAME,CITYIMAGE,COUNTRYID) values (61,'Mosco','C:\fakepath\Screenshot 2023-10-29 191532.png',41);
REM INSERTING into C##FLIGHT.CONTACTUS
SET DEFINE OFF;
Insert into C##FLIGHT.CONTACTUS (ID,CONTACTEMAIL,CONTACTPHONE,CONTACTADDRESS) values (1,'contact@travelagency.com','111-222-3333','Jordan-Amman');
REM INSERTING into C##FLIGHT.CONTACT_MESSAGES
SET DEFINE OFF;
Insert into C##FLIGHT.CONTACT_MESSAGES (ID,FIRSTNAME,LASTNAME,EMAIL) values (1,'Ahmad','Ababneh','Ahmad@hotmail.com');
REM INSERTING into C##FLIGHT.COUNTRY
SET DEFINE OFF;
Insert into C##FLIGHT.COUNTRY (ID,COUNTRYNAME) values (1,'Jordan');
Insert into C##FLIGHT.COUNTRY (ID,COUNTRYNAME) values (2,'Saudi Arabia');
Insert into C##FLIGHT.COUNTRY (ID,COUNTRYNAME) values (3,'Kuwait');
Insert into C##FLIGHT.COUNTRY (ID,COUNTRYNAME) values (41,'Russia');
Insert into C##FLIGHT.COUNTRY (ID,COUNTRYNAME) values (21,'Bahrain');
REM INSERTING into C##FLIGHT.DEGREE
SET DEFINE OFF;
Insert into C##FLIGHT.DEGREE (ID,DEGREENAME) values (3,'Economy');
Insert into C##FLIGHT.DEGREE (ID,DEGREENAME) values (4,'Business');
Insert into C##FLIGHT.DEGREE (ID,DEGREENAME) values (5,'First Class');
REM INSERTING into C##FLIGHT.DEGREE_FACILITIES
SET DEFINE OFF;
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (21,3,4);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (22,3,5);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (66,4,3);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (64,5,44);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (5,3,3);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (6,4,4);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (7,5,5);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (61,5,42);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (42,null,5);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (63,5,4);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (68,4,43);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (62,5,3);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (65,4,42);
Insert into C##FLIGHT.DEGREE_FACILITIES (ID,DEGREEID,FACILITYID) values (67,4,21);
REM INSERTING into C##FLIGHT.FACILITY
SET DEFINE OFF;
Insert into C##FLIGHT.FACILITY (ID,FACILITYNAME,FACILITYIMAGE) values (21,'Sleeping Bed','sleep.jpg');
Insert into C##FLIGHT.FACILITY (ID,FACILITYNAME,FACILITYIMAGE) values (42,'Power Outlets and USB Ports',null);
Insert into C##FLIGHT.FACILITY (ID,FACILITYNAME,FACILITYIMAGE) values (44,'Premium Class Perks',null);
Insert into C##FLIGHT.FACILITY (ID,FACILITYNAME,FACILITYIMAGE) values (3,'Wi-Fi','wifi_image.jpg');
Insert into C##FLIGHT.FACILITY (ID,FACILITYNAME,FACILITYIMAGE) values (4,'In-Flight Entertainment','entertainment_image.jpg');
Insert into C##FLIGHT.FACILITY (ID,FACILITYNAME,FACILITYIMAGE) values (5,'Meal Service','meal_image.jpg');
Insert into C##FLIGHT.FACILITY (ID,FACILITYNAME,FACILITYIMAGE) values (43,'Customer Service',null);
Insert into C##FLIGHT.FACILITY (ID,FACILITYNAME,FACILITYIMAGE) values (41,'Overhead Storage',null);
REM INSERTING into C##FLIGHT.FLIGHT
SET DEFINE OFF;
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (147,'KU701',60,700,to_date('27-NOV-24','DD-MON-RR'),to_date('27-NOV-24','DD-MON-RR'),'Scheduled',0,4,4,5,null,700);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (162,'JO201',50,400,to_date('13-NOV-24','DD-MON-RR'),to_date('13-NOV-24','DD-MON-RR'),'Landed',0,3,4,6,3,0);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (141,'CL153555',50,300,to_date('12-NOV-24','DD-MON-RR'),to_date('12-NOV-24','DD-MON-RR'),'Landed',0,3,6,4,3,300);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (223,'Sadeen',50,200,to_date('18-NOV-24','DD-MON-RR'),to_date('27-NOV-24','DD-MON-RR'),'In Air',50,21,null,null,null,100);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (222,'WAseem',30,500,to_date('23-NOV-24','DD-MON-RR'),to_date('23-NOV-24','DD-MON-RR'),'Scheduled',50,3,61,6,3,250);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (282,'FE301',126,500,to_date('23-NOV-24','DD-MON-RR'),to_date('23-NOV-25','DD-MON-RR'),'Scheduled',99,61,4,61,5,5);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (245,'MO201',40,300,to_date('21-NOV-24','DD-MON-RR'),to_date('21-NOV-24','DD-MON-RR'),'Landed',0,21,6,4,3,300);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (281,'Feras123',30,300,to_date('22-NOV-24','DD-MON-RR'),to_date('22-NOV-24','DD-MON-RR'),'Landed',90,3,4,6,5,30);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (242,'JO301',50,300,to_date('20-NOV-24','DD-MON-RR'),to_date('20-NOV-24','DD-MON-RR'),'Landed',0,3,4,5,3,300);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (244,'JO700',60,450,to_date('26-NOV-24','DD-MON-RR'),to_date('26-NOV-24','DD-MON-RR'),'Scheduled',10,3,4,6,5,405);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (148,'KU505',50,300,to_date('12-NOV-24','DD-MON-RR'),to_date('12-NOV-24','DD-MON-RR'),'Landed',0,4,4,6,4,0);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (241,'MO301',50,100,to_date('19-NOV-24','DD-MON-RR'),to_date('19-NOV-24','DD-MON-RR'),'Landed',0,21,6,61,5,100);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (149,'KU798',40,300,to_date('12-NOV-24','DD-MON-RR'),to_date('15-NOV-24','DD-MON-RR'),'Landed',0,4,4,5,null,0);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (261,'Da301',30,500,to_date('20-NOV-24','DD-MON-RR'),to_date('20-NOV-24','DD-MON-RR'),'Landed',10,3,4,5,3,450);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (146,'KU310',60,200,to_date('29-NOV-24','DD-MON-RR'),to_date('29-NOV-24','DD-MON-RR'),'Scheduled',0,4,5,4,3,200);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (181,'MO184',50,500,to_date('21-NOV-24','DD-MON-RR'),to_date('21-NOV-24','DD-MON-RR'),'Landed',null,21,null,null,null,500);
Insert into C##FLIGHT.FLIGHT (ID,FLIGHTNUMBER,CAPACITY,PRICEPERPASSENGER,DEPARTUREDATE,DESTINATIONDATE,STATUS,DISCOUNTVALUE,AIRLINEID,DEPARTUREAIRPORTID,DESTINATIONAIRPORTID,DEGREEID,PRICEAFTERDISCOUNT) values (243,'Jo910',40,600,to_date('22-NOV-24','DD-MON-RR'),to_date('22-NOV-24','DD-MON-RR'),'Landed',0,3,6,5,4,600);
REM INSERTING into C##FLIGHT.HOME
SET DEFINE OFF;
Insert into C##FLIGHT.HOME (ID,HOMETITLE,HOMECONTENT,HOMEIMAGE) values (1,'Hello There ...:)','Your are welcome Mate','111e4cce-f8f8-40c2-88d6-49fdb3d874cd_hero-slider-2.jpg');
REM INSERTING into C##FLIGHT.LOGIN
SET DEFINE OFF;
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (41,'Khaled123','123',2,21,null);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (61,'kuwaitAirline','123',3,null,4);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (81,'Omar123','wassem48',2,41,null);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (161,'dana123','wassem48',2,121,null);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (181,'feras123','wassem48',3,null,61);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (141,'moath123','wassem48',2,101,null);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (3,'yara99','123',1,3,null);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (4,'abdulaziz123','123',2,5,null);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (5,'sadeen123','123',2,4,null);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (6,'leen123','123',2,6,null);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (42,'aireline123','123',3,null,3);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (101,'Aws123','wassem48',2,61,null);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (102,'moroco123','wassem48',3,null,21);
Insert into C##FLIGHT.LOGIN (ID,USERNAME,PASSWORD,ROLEID,USERID,AIRLINEID) values (121,'Your Username','********',2,81,null);
REM INSERTING into C##FLIGHT.PARTNER
SET DEFINE OFF;
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (182,'Ahmad','Omar','987654321',101);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (31,'Feras','Shaweesh','123',4);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (84,'wfcvwefc','qwdqwd12','123',4);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (87,'fgwefgwe','wfwef','321',4);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (32,'Laith','idk','123',4);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (3,'Mohammad','Ababneh','3216549487',5);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (4,'Sara','Rashdan','6541321789',6);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (85,'evevew','ebvebvew','12345',4);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (89,'qdqdq','qdqwdqw','123',4);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (93,'vwvv','qewfqf','123',4);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (94,'wwfvw','gwgwg','123',4);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (221,'Liatyh','dkqwje','129381483',4);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (62,'Aws','Obeidat','1234567890',4);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (201,'Ahmad','Khaled','12345678',121);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (162,'ahmad','wefw','123123',4);
Insert into C##FLIGHT.PARTNER (ID,FIRSTNAME,LASTNAME,NATIONALNUMBER,USERID) values (181,'Khaled','Ahmad','1234567',101);
REM INSERTING into C##FLIGHT.RESERVATION
SET DEFINE OFF;
Insert into C##FLIGHT.RESERVATION (ID,RESERVATIONDATE,TOTALPRICE,NUMOFPASSENGERS,USERID,FLIGHTID) values (161,to_date('15-NOV-24','DD-MON-RR'),700,0,4,147);
Insert into C##FLIGHT.RESERVATION (ID,RESERVATIONDATE,TOTALPRICE,NUMOFPASSENGERS,USERID,FLIGHTID) values (121,to_date('05-JUL-25','DD-MON-RR'),200,0,4,146);
Insert into C##FLIGHT.RESERVATION (ID,RESERVATIONDATE,TOTALPRICE,NUMOFPASSENGERS,USERID,FLIGHTID) values (241,to_date('21-NOV-24','DD-MON-RR'),1200,1,4,243);
Insert into C##FLIGHT.RESERVATION (ID,RESERVATIONDATE,TOTALPRICE,NUMOFPASSENGERS,USERID,FLIGHTID) values (183,to_date('18-NOV-24','DD-MON-RR'),200,0,4,146);
Insert into C##FLIGHT.RESERVATION (ID,RESERVATIONDATE,TOTALPRICE,NUMOFPASSENGERS,USERID,FLIGHTID) values (201,to_date('20-NOV-24','DD-MON-RR'),1215,2,101,244);
Insert into C##FLIGHT.RESERVATION (ID,RESERVATIONDATE,TOTALPRICE,NUMOFPASSENGERS,USERID,FLIGHTID) values (181,to_date('17-NOV-24','DD-MON-RR'),500,1,4,222);
Insert into C##FLIGHT.RESERVATION (ID,RESERVATIONDATE,TOTALPRICE,NUMOFPASSENGERS,USERID,FLIGHTID) values (182,to_date('18-NOV-24','DD-MON-RR'),500,1,4,222);
Insert into C##FLIGHT.RESERVATION (ID,RESERVATIONDATE,TOTALPRICE,NUMOFPASSENGERS,USERID,FLIGHTID) values (221,to_date('20-NOV-24','DD-MON-RR'),600,1,121,242);
Insert into C##FLIGHT.RESERVATION (ID,RESERVATIONDATE,TOTALPRICE,NUMOFPASSENGERS,USERID,FLIGHTID) values (101,to_date('20-NOV-24','DD-MON-RR'),900,2,4,141);
REM INSERTING into C##FLIGHT.ROLE
SET DEFINE OFF;
Insert into C##FLIGHT.ROLE (ID,ROLENAME) values (1,'Admin');
Insert into C##FLIGHT.ROLE (ID,ROLENAME) values (2,'User');
Insert into C##FLIGHT.ROLE (ID,ROLENAME) values (3,'Airlines');
REM INSERTING into C##FLIGHT.TESTIMONIAL
SET DEFINE OFF;
Insert into C##FLIGHT.TESTIMONIAL (ID,TESTIMONIALCONTENT,RATING,TESTIMONIALDATE,TESTIMONIALSTATUS,USERID) values (121,'Hello Im Dana',5,to_date('20-NOV-24','DD-MON-RR'),'Approved',121);
Insert into C##FLIGHT.TESTIMONIAL (ID,TESTIMONIALCONTENT,RATING,TESTIMONIALDATE,TESTIMONIALSTATUS,USERID) values (41,'Hello:)',5,to_date('06-NOV-24','DD-MON-RR'),'Approved',4);
Insert into C##FLIGHT.TESTIMONIAL (ID,TESTIMONIALCONTENT,RATING,TESTIMONIALDATE,TESTIMONIALSTATUS,USERID) values (61,'WOW Your website is awsome <3',5,to_date('13-NOV-24','DD-MON-RR'),'Approved',41);
Insert into C##FLIGHT.TESTIMONIAL (ID,TESTIMONIALCONTENT,RATING,TESTIMONIALDATE,TESTIMONIALSTATUS,USERID) values (3,'Great service!',5,to_date('01-OCT-24','DD-MON-RR'),'Approved',4);
Insert into C##FLIGHT.TESTIMONIAL (ID,TESTIMONIALCONTENT,RATING,TESTIMONIALDATE,TESTIMONIALSTATUS,USERID) values (4,'Loved the experience!',4,to_date('01-OCT-24','DD-MON-RR'),'Approved',6);
Insert into C##FLIGHT.TESTIMONIAL (ID,TESTIMONIALCONTENT,RATING,TESTIMONIALDATE,TESTIMONIALSTATUS,USERID) values (101,'WOW',3,to_date('15-NOV-24','DD-MON-RR'),'Pending',4);
REM INSERTING into C##FLIGHT.USERS
SET DEFINE OFF;
Insert into C##FLIGHT.USERS (ID,FIRSTNAME,LASTNAME,EMAIL,PHONE,DATEOFBIRTH,IMAGE,NATIONALNUMBER) values (21,'Khaled','Ababneh','Khaled1@gmaill.om','0795153604',to_date('05-JUL-02','DD-MON-RR'),'7572675a-aee4-44cd-a96b-211823594f48_user2.png','Jordanian');
Insert into C##FLIGHT.USERS (ID,FIRSTNAME,LASTNAME,EMAIL,PHONE,DATEOFBIRTH,IMAGE,NATIONALNUMBER) values (41,'Omar','Ababneh','Omar@hotmail.com','0795153604',to_date('28-OCT-24','DD-MON-RR'),'746e9b53-c156-4d24-b1d8-84c8b8e765f0_user3.jpg','0989761');
Insert into C##FLIGHT.USERS (ID,FIRSTNAME,LASTNAME,EMAIL,PHONE,DATEOFBIRTH,IMAGE,NATIONALNUMBER) values (121,'Dana','Kanaan','Dana@hotmail.com','07999999',to_date('11-FEB-93','DD-MON-RR'),'741d1b84-c230-4b9e-974f-f6a23081a451_user-1.png','123456789');
Insert into C##FLIGHT.USERS (ID,FIRSTNAME,LASTNAME,EMAIL,PHONE,DATEOFBIRTH,IMAGE,NATIONALNUMBER) values (101,'Moath','Ababneh','moath@hotmail.com','0795153604',to_date('29-OCT-24','DD-MON-RR'),'e82c9411-2de1-497d-8521-5b7aca786caa_user-1.png','42314234r');
Insert into C##FLIGHT.USERS (ID,FIRSTNAME,LASTNAME,EMAIL,PHONE,DATEOFBIRTH,IMAGE,NATIONALNUMBER) values (3,'Yara123','Haddad','yara@gmail.com','123-456-7890',to_date('29-OCT-99','DD-MON-RR'),'746e9b53-c156-4d24-b1d8-84c8b8e765f0_user3.jpg','123456789');
Insert into C##FLIGHT.USERS (ID,FIRSTNAME,LASTNAME,EMAIL,PHONE,DATEOFBIRTH,IMAGE,NATIONALNUMBER) values (4,'Sadeen','Fadel','wassem305@hotmail.com','987-654-3210',to_date('18-OCT-02','DD-MON-RR'),'78990e1b-daa5-4a70-8b72-200049fe8b16_Screenshot 2023-10-29 191532.png','9876543210');
Insert into C##FLIGHT.USERS (ID,FIRSTNAME,LASTNAME,EMAIL,PHONE,DATEOFBIRTH,IMAGE,NATIONALNUMBER) values (5,'Abdulaziz','Ababneh','abdulaziz@gmail.com','987-665-3210',to_date('05-JUL-02','DD-MON-RR'),'7572675a-aee4-44cd-a96b-211823594f48_user2.png','9876543310');
Insert into C##FLIGHT.USERS (ID,FIRSTNAME,LASTNAME,EMAIL,PHONE,DATEOFBIRTH,IMAGE,NATIONALNUMBER) values (6,'Leen','AL-rashdan','leen@gmail.com','987-665-3210',to_date('05-JUL-01','DD-MON-RR'),null,'9876213210');
Insert into C##FLIGHT.USERS (ID,FIRSTNAME,LASTNAME,EMAIL,PHONE,DATEOFBIRTH,IMAGE,NATIONALNUMBER) values (22,'Waseem','ababneh','waseem@gmai.com','0795153604',to_date('05-JUL-02','DD-MON-RR'),'91d78356-e956-4ea6-8a7b-52def0d09e0a_Screenshot 2023-10-29 191532.png','Jordanian');
Insert into C##FLIGHT.USERS (ID,FIRSTNAME,LASTNAME,EMAIL,PHONE,DATEOFBIRTH,IMAGE,NATIONALNUMBER) values (61,'Aws','Obeidat','Aws@hotmail.com','079834761',to_date('25-JAN-05','DD-MON-RR'),'1c3e47f9-eff9-4df8-ba4b-f63a8ac92e00_Screenshot 2023-10-29 191532.png','1234567890');
Insert into C##FLIGHT.USERS (ID,FIRSTNAME,LASTNAME,EMAIL,PHONE,DATEOFBIRTH,IMAGE,NATIONALNUMBER) values (81,'Your First Name','Your Last Name','ex@example.com',null,null,null,'Your National Number');
--------------------------------------------------------
--  DDL for Index SYS_C008704
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008704" ON "C##FLIGHT"."COUNTRY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008706
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008706" ON "C##FLIGHT"."CITY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008709
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008709" ON "C##FLIGHT"."AIRPORT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008712
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008712" ON "C##FLIGHT"."ROLE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008714
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008714" ON "C##FLIGHT"."USERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008716
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008716" ON "C##FLIGHT"."LOGIN" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008721
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008721" ON "C##FLIGHT"."AIRLINES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008723
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008723" ON "C##FLIGHT"."DEGREE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008725
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008725" ON "C##FLIGHT"."FACILITY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008728
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008728" ON "C##FLIGHT"."TESTIMONIAL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008731
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008731" ON "C##FLIGHT"."PARTNER" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008734
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008734" ON "C##FLIGHT"."HOME" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008736
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008736" ON "C##FLIGHT"."ABOUTUS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008738
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008738" ON "C##FLIGHT"."CONTACTUS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008740
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008740" ON "C##FLIGHT"."BANK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008742
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008742" ON "C##FLIGHT"."DEGREE_FACILITIES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008747
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008747" ON "C##FLIGHT"."FLIGHT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008753
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008753" ON "C##FLIGHT"."RESERVATION" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008763
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008763" ON "C##FLIGHT"."CONTACT_MESSAGES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_IL0000084751C00005$$
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_IL0000084751C00005$$" ON "C##FLIGHT"."CONTACT_MESSAGES" (
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
  PARALLEL (DEGREE 0 INSTANCES 0) ;
--------------------------------------------------------
--  DDL for Index SYS_C008736
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008736" ON "C##FLIGHT"."ABOUTUS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008721
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008721" ON "C##FLIGHT"."AIRLINES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008709
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008709" ON "C##FLIGHT"."AIRPORT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008740
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008740" ON "C##FLIGHT"."BANK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008706
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008706" ON "C##FLIGHT"."CITY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008738
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008738" ON "C##FLIGHT"."CONTACTUS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008763
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008763" ON "C##FLIGHT"."CONTACT_MESSAGES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008704
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008704" ON "C##FLIGHT"."COUNTRY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008723
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008723" ON "C##FLIGHT"."DEGREE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008742
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008742" ON "C##FLIGHT"."DEGREE_FACILITIES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008725
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008725" ON "C##FLIGHT"."FACILITY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008747
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008747" ON "C##FLIGHT"."FLIGHT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008734
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008734" ON "C##FLIGHT"."HOME" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008716
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008716" ON "C##FLIGHT"."LOGIN" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008731
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008731" ON "C##FLIGHT"."PARTNER" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008753
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008753" ON "C##FLIGHT"."RESERVATION" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008712
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008712" ON "C##FLIGHT"."ROLE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008728
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008728" ON "C##FLIGHT"."TESTIMONIAL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008714
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FLIGHT"."SYS_C008714" ON "C##FLIGHT"."USERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Procedure UPDATEFLIGHTSTATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "C##FLIGHT"."UPDATEFLIGHTSTATUS" AS
BEGIN
  -- Loop through each record in the FLIGHT table
  FOR flight_rec IN (
    SELECT ID, STATUS, DEPARTUREDATE, DESTINATIONDATE
    FROM FLIGHT
  ) LOOP
    -- Check if the status is 'Scheduled' and the current date is past the DEPARTUREDATE
    IF flight_rec.STATUS = 'Scheduled' AND SYSDATE >= flight_rec.DEPARTUREDATE THEN
      UPDATE FLIGHT
      SET STATUS = 'In Air'
      WHERE ID = flight_rec.ID;
    -- Check if the status is 'In Air' and the current date is past the DESTINATIONDATE
    ELSIF flight_rec.STATUS = 'In Air' AND SYSDATE >= flight_rec.DESTINATIONDATE THEN
      UPDATE FLIGHT
      SET STATUS = 'Landed'
      WHERE ID = flight_rec.ID;
    END IF;
  END LOOP;

  -- Commit the changes
  COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Package ABOUT_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."ABOUT_PKG" AS 
    PROCEDURE GetAll;
    PROCEDURE UpdateAbout(p_Id IN NUMBER, about_title IN VARCHAR2, about_content IN VARCHAR2, about_image IN VARCHAR2);
END about_pkg;

/
--------------------------------------------------------
--  DDL for Package AIRLINE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."AIRLINE_PACKAGE" AS
PROCEDURE GetAllAirline;
PROCEDURE GetAirlineById(a_id in number);
PROCEDURE CreateAirline(Airline_Name in varchar2, Airline_image in varchar2,
Airline_Email in varchar2, Airline_Address in varchar2, Activation_Status in varchar2,
a_username in varchar2, a_pass in varchar2, a_roleid in number);
PROCEDURE UpdateAirline(a_id in number, Airline_Name in varchar2, Airline_image in varchar2,
Airline_Email in varchar2, Airline_Address in varchar2, Activation_Status in varchar2,
a_username in varchar2, a_pass in varchar2);
PROCEDURE Change_Activation_Status(a_id in number, Activation_Status in varchar2);
END airline_Package ;

/
--------------------------------------------------------
--  DDL for Package AIRPORT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."AIRPORT_PACKAGE" AS

    PROCEDURE CreateAirport(
        p_AirportName VARCHAR2,
        p_IATACode VARCHAR2,
        p_Longitude NUMBER,
        p_Latitude NUMBER,
        p_AirportImage VARCHAR2,
        p_CityId NUMBER
    );

    -- Procedure to update an airport
    PROCEDURE UpdateAirport(
        p_ID NUMBER,
        p_AirportName VARCHAR2,
        p_IATACode VARCHAR2,
        p_Longitude NUMBER,
        p_Latitude NUMBER,
        p_AirportImage VARCHAR2,
        p_CityId NUMBER
    );

    PROCEDURE DeleteAirport(p_ID NUMBER);

    PROCEDURE FetchAirportByID(p_ID NUMBER);

    PROCEDURE FetchAllAirports;

END AirPort_Package;

/
--------------------------------------------------------
--  DDL for Package BANK_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."BANK_PACKAGE" AS
    PROCEDURE PaymentCheck(
        p_CardNumber IN NUMBER,
        p_CVV IN NUMBER,
        p_ExpiryDate IN DATE,
        p_Balance IN NUMBER,
        p_Result OUT BOOLEAN
    );
END BANK_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package CITY_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."CITY_PKG" AS 

    PROCEDURE CREATE_CITY(p_CityName IN VARCHAR2, p_CityImage IN VARCHAR2, p_CountryId IN NUMBER);
    PROCEDURE UPDATE_CITY(p_Id IN NUMBER, p_CityName IN VARCHAR2, p_CityImage IN VARCHAR2, p_CountryId IN NUMBER);
    PROCEDURE DELETE_CITY(p_Id IN NUMBER);
    PROCEDURE GET_ALL_CITIES;
    PROCEDURE GET_CITY_BY_ID(p_Id IN NUMBER);
    PROCEDURE GET_CITIES_BY_COUNTRY(p_CountryId IN NUMBER);

END CITY_PKG;

/
--------------------------------------------------------
--  DDL for Package CONTACTMESSAGE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."CONTACTMESSAGE_PKG" AS 
    PROCEDURE GetAll;
    PROCEDURE CreateContactMessage(p_FirstName IN VARCHAR2, p_LastName IN VARCHAR2, p_Email IN VARCHAR2, p_message CLOB);
END contactMessage_pkg;

/
--------------------------------------------------------
--  DDL for Package CONTACT_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."CONTACT_PKG" AS 
    PROCEDURE GetAll;
    PROCEDURE UpdateContact(p_Id IN NUMBER, contact_email IN VARCHAR2, contact_phone IN VARCHAR2, contact_address IN varchar2);
END contact_pkg;

/
--------------------------------------------------------
--  DDL for Package COUNTRY_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."COUNTRY_PKG" AS 


    PROCEDURE CREATE_COUNTRY(p_CountryName IN VARCHAR2);
    PROCEDURE UPDATE_COUNTRY(p_Id IN NUMBER, p_CountryName IN VARCHAR2);
    PROCEDURE DELETE_COUNTRY(p_Id IN NUMBER);
    PROCEDURE GET_ALL_COUNTRIES;
    PROCEDURE GET_COUNTRY_BY_ID(p_Id IN NUMBER);

END COUNTRY_PKG;

/
--------------------------------------------------------
--  DDL for Package DEGREE_FACILITY_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."DEGREE_FACILITY_PACKAGE" AS
PROCEDURE CreateDegreeFacility(Degree_id in number, Facility_id in number);
PROCEDURE UpdateDegreeFacility(dfid in NUMBER, Degree_id in number, Facility_id in number);
PROCEDURE DeleteDegreeFacility(dfid IN NUMBER);
PROCEDURE GetAvailableFacilitiesForDegree(Degree_id IN NUMBER);

END degree_facility_Package ;

/
--------------------------------------------------------
--  DDL for Package DEGREE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."DEGREE_PACKAGE" AS
PROCEDURE CreateDegree(Degree_Name in varchar2);
PROCEDURE UpdateDegree(degid in NUMBER, Degree_Name in varchar2);
PROCEDURE DeleteDegree(degid IN NUMBER);
PROCEDURE GetAllDegrees;
END degree_Package ;

/
--------------------------------------------------------
--  DDL for Package FACILITY_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."FACILITY_PACKAGE" AS
PROCEDURE GetAllFacility;
PROCEDURE CreateFacility(Facility_Name in varchar2, Facility_image in varchar2);
PROCEDURE UpdateFacility(facid in NUMBER, Facility_Name in varchar2, Facility_image in varchar2);
PROCEDURE DeleteFacility(facid IN NUMBER);
END facility_Package ;

/
--------------------------------------------------------
--  DDL for Package FLIGHT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."FLIGHT_PACKAGE" AS
    PROCEDURE GetAllFlightsData;
    
    PROCEDURE CreateFlight(
        p_FlightNumber       VARCHAR2,     
        p_Capacity           NUMBER,
        p_price              NUMBER,
        p_Departure_Date     DATE,
        p_Destination_Date   DATE,
        p_DiscountValue      NUMBER,
        p_AirLineID          NUMBER,
        p_DepartureAirportID NUMBER,
        p_DestinationAirportID NUMBER,
        p_DegreeID           NUMBER,
        p_PriceAfterDiscount NUMBER
    );
    
    PROCEDURE UpdateFlight(
        p_ID                NUMBER,
        p_FlightNumber      VARCHAR2,     
        p_Capacity          NUMBER,
        p_price             NUMBER,
        p_Departure_Date    DATE,
        p_Destination_Date  DATE,
        p_DiscountValue     NUMBER,
        p_AirLineID         NUMBER,
        p_DepartureAirportID NUMBER,
        p_DestinationAirportID NUMBER,
        p_DegreeID          NUMBER,
        p_PriceAfterDiscount NUMBER

    );
    
    PROCEDURE DeleteFlight(p_ID IN NUMBER);  -- 
    PROCEDURE FetchFlightByID(p_ID IN NUMBER); 
    PROCEDURE FetchFlightByFlightNumber(p_FlightNumber IN VARCHAR2); 
    PROCEDURE FetchAllFlights;
     PROCEDURE SearchForFlights(
    p_DepartureCityID IN NUMBER,
    p_DestinationCityID IN NUMBER,
    p_DepartureDate IN DATE,
    p_ClassTypeID IN NUMBER
);
PROCEDURE FetchAllFacilitesByDegreeId (p_Degreeid Number);
PROCEDURE GetAllFlightsByAirlineID(p_AirlineID IN NUMBER);

END Flight_Package;

/
--------------------------------------------------------
--  DDL for Package HOME_PAGE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."HOME_PAGE_PKG" AS 
    PROCEDURE GetAll;
    PROCEDURE UpdateHome(p_Id IN NUMBER, home_title IN VARCHAR2, home_content IN VARCHAR2, home_image IN varchar2);
END home_page_pkg;

/
--------------------------------------------------------
--  DDL for Package LOGIN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."LOGIN_PACKAGE" 
AS
PROCEDURE User_Login(user_name IN VARCHAR,pass IN VARCHAR);
PROCEDURE Airline_Login(user_name IN VARCHAR,pass IN VARCHAR);

END Login_Package;

/
--------------------------------------------------------
--  DDL for Package PARTENER_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."PARTENER_PKG" AS

PROCEDURE CreatePartner(F_NAME IN VARCHAR2, L_NAME IN VARCHAR2,NATIONAL_NUM IN VARCHAR2,U_ID IN NUMBER);

PROCEDURE GetPartnersByUser(  p_UserId IN NUMBER);


END  PARTENER_PKG;

/
--------------------------------------------------------
--  DDL for Package RESERVATION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."RESERVATION_PACKAGE" AS

    PROCEDURE CreateReservation(
        p_ReservationDate DATE,
        p_TotalPrice NUMBER,
        p_NumOfPassengers NUMBER,
        p_UserID NUMBER,
        p_FlightID NUMBER
    );

    PROCEDURE FetchReservationsByUserID(p_UserID NUMBER);
    PROCEDURE FetchReservationsByID(p_id NUMBER);
    PROCEDURE FetchAllReservations;
    PROCEDURE SearchReservation(fName in varchar2 , lName in varchar2, flightNum in varchar2, DateFrom in date , DateTo in date);
PROCEDURE GetMonthlyTotalPrice (
    from_date IN DATE,
    to_date IN DATE
);
 PROCEDURE GetEntityCounts(
    p_airports OUT NUMBER,
    p_users OUT NUMBER,
    p_reservations OUT NUMBER,
    p_airlines OUT NUMBER
);
 PROCEDURE FetchReservationsByAirline(p_id NUMBER);
 PROCEDURE GetMonthlyReport(reportMonth IN NUMBER, reportYear IN NUMBER);


PROCEDURE GetAnnualReport(reportYear IN NUMBER);


END Reservation_Package;

/
--------------------------------------------------------
--  DDL for Package TESTIMONIALS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."TESTIMONIALS_PKG" AS 

PROCEDURE CREATE_TESTIMONIAL(T_content in VARCHAR2, T_rating in number , T_date in date, T_status in VARCHAR2, User_id in number);

PROCEDURE DELETE_TESTIMONIAL(T_id in number); 

PROCEDURE GET_ALL_TESTIMONIALS;

PROCEDURE CHANGE_TESTIMONIAL_STATUS(T_id in  number, T_status in VARCHAR2); 

end TESTIMONIALS_PKG; 

/
--------------------------------------------------------
--  DDL for Package USER_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FLIGHT"."USER_PKG" 
as 
procedure CreateUser( p_FirstName IN VARCHAR2, p_LastName IN VARCHAR2, p_Email IN VARCHAR2, p_Phone IN VARCHAR2, 
p_DateOfBirth IN DATE, p_Image IN VARCHAR2, p_NationalNumber IN VARCHAR2,p_Username IN VARCHAR2,  p_Password IN VARCHAR2, p_RoleId IN NUMBER); 

PROCEDURE UpdateUser(p_ID IN NUMBER ,
    p_FirstName IN VARCHAR2,
    p_LastName IN VARCHAR2,
    p_Email IN VARCHAR2,
    p_Phone IN VARCHAR2,
    p_DateOfBirth IN DATE,
    p_Image IN VARCHAR2,
    p_NationalNumber IN VARCHAR2,
    p_Username IN VARCHAR2,       
    p_Password IN VARCHAR2         
     ); 
PROCEDURE CheckUserExists (
    p_Username IN VARCHAR2,
    p_Email IN VARCHAR2,
    p_Result OUT VARCHAR2
);

PROCEDURE GetAllUsers;
PROCEDURE GetUserById(U_ID IN NUMBER); 
PROCEDURE GetUsersWithPartners;


end USER_PKG;

/
--------------------------------------------------------
--  DDL for Package Body ABOUT_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."ABOUT_PKG" AS 

PROCEDURE GetAll AS
        c_item SYS_REFCURSOR;
    BEGIN
        OPEN c_item FOR 
        SELECT * FROM aboutus;

        DBMS_SQL.RETURN_RESULT(c_item);
    END GetAll;


    PROCEDURE UpdateAbout(p_Id IN NUMBER, about_title IN VARCHAR2, about_content IN VARCHAR2, about_image IN VARCHAR2) AS
    BEGIN
        UPDATE aboutus 
        SET abouttitle = about_title, 
            aboutcontent = about_content, 
            aboutimage = about_image
        WHERE Id = p_Id;

        COMMIT;
    END UpdateAbout;

END about_pkg;

/
--------------------------------------------------------
--  DDL for Package Body AIRLINE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."AIRLINE_PACKAGE" as

PROCEDURE GetAllAirline
AS
    c_all sys_refcursor;
    BEGIN
    open c_all for select a.id, a.airlinename, a.airlineimage, a.airlineemail,
                          a.airlineaddress, a.activationstatus,
                          l.username 
    from Airlines a
    join login l
    on a.id = l.airlineid;
    Dbms_sql.return_result(c_all);
END GetAllAirline;
--
PROCEDURE GetAirlineById(a_id in number)
AS
    c_item sys_refcursor;
    BEGIN
    open c_item for select a.id, a.airlinename, a.airlineimage, a.airlineemail,
                          a.airlineaddress, a.activationstatus,
                          l.username, l.password
    from Airlines a
    join login l
    on a.id = l.airlineid
    where a.id = a_id;
    Dbms_sql.return_result(c_item);
END GetAirlineById;
--
PROCEDURE CreateAirline(Airline_Name in varchar2, Airline_image in varchar2,
Airline_Email in varchar2, Airline_Address in varchar2, Activation_Status in varchar2,
a_username in varchar2, a_pass in varchar2, a_roleid in number)
AS
    v_airid NUMBER;
BEGIN
    INSERT INTO Airlines (id, AirlineName, AirlineImage, AirlineEmail, AirlineAddress, ActivationStatus) 
    VALUES(default, Airline_Name, Airline_image, Airline_Email, Airline_Address, Activation_Status)
    RETURNING ID INTO v_airid;

    INSERT INTO Login (id, username, password, roleid, userid, airlineid)
    VALUES(default, a_username, a_pass, a_roleid, null, v_airid);

    COMMIT;
END CreateAirline;
--
PROCEDURE UpdateAirline(a_id in number, Airline_Name in varchar2, Airline_image in varchar2,
Airline_Email in varchar2, Airline_Address in varchar2, Activation_Status in varchar2,
a_username in varchar2, a_pass in varchar2)
AS
    BEGIN
    Update Airlines SET AirlineName = Airline_Name, AirlineImage = Airline_image, AirlineEmail = Airline_Email,
                    AirlineAddress = Airline_Address, ActivationStatus = Activation_Status
    WHERE id = a_id;

    Update Login SET username = a_username, password = a_pass
    WHERE airlineid = a_id;


    COMMIT;
END UpdateAirline;
--
PROCEDURE Change_Activation_Status(a_id in number, Activation_Status in varchar2)
AS
    BEGIN
    Update Airlines SET ActivationStatus = Activation_Status
    WHERE id = a_id;
    COMMIT;
END Change_Activation_Status;

End airline_Package;

/
--------------------------------------------------------
--  DDL for Package Body AIRPORT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."AIRPORT_PACKAGE" AS

    -- Procedure to create an airport
    PROCEDURE CreateAirport(
        p_AirportName VARCHAR2,
        p_IATACode VARCHAR2,
        p_Longitude NUMBER,
        p_Latitude NUMBER,
        p_AirportImage VARCHAR2,
        p_CityId NUMBER
    ) AS
    BEGIN
        INSERT INTO AIRPORT (
            AIRPORTNAME,
            IATACODE,
            LONGITUDE,
            LATITUDE,
            AIRPORTIMAGE,
            CITYID
        )
        VALUES
        ( 
            p_AirportName,
            p_IATACode,
            p_Longitude,
            p_Latitude,
            p_AirportImage,
            p_CityId
        );
        COMMIT;
    END CreateAirport;

    PROCEDURE UpdateAirport(
        p_ID NUMBER,
        p_AirportName VARCHAR2,
        p_IATACode VARCHAR2,
        p_Longitude NUMBER,
        p_Latitude NUMBER,
        p_AirportImage VARCHAR2,
        p_CityId NUMBER
    ) AS
    BEGIN
        UPDATE AIRPORT
        SET
            AIRPORTNAME = p_AirportName,
            IATACODE = p_IATACode,
            LONGITUDE = p_Longitude,
            LATITUDE = p_Latitude,
            AIRPORTIMAGE = p_AirportImage,
            CITYID = p_CityId
        WHERE ID = p_ID;
        COMMIT;
    END UpdateAirport;

    PROCEDURE DeleteAirport(p_ID NUMBER) AS
    BEGIN
        DELETE FROM AIRPORT WHERE ID = p_ID;
        COMMIT;
    END DeleteAirport;

   PROCEDURE FetchAirportByID(p_ID NUMBER) IS
    c_cursor SYS_REFCURSOR;
BEGIN
    OPEN c_cursor FOR
    SELECT 
        a.ID,
        a.AIRPORTNAME,
        a.IATACODE,
        a.LONGITUDE,
        a.LATITUDE,
        a.AIRPORTIMAGE,
        c.cityname
    FROM AIRPORT a
    INNER JOIN CITY c ON a.cityid = c.id
    WHERE a.ID = p_ID;

    DBMS_SQL.RETURN_RESULT(c_cursor);
END FetchAirportByID;


    PROCEDURE FetchAllAirports IS
    c_cursor SYS_REFCURSOR;
BEGIN
    OPEN c_cursor FOR
        SELECT 
            a.ID,
            a.AIRPORTNAME,
            a.IATACODE,
            a.LONGITUDE,
            a.LATITUDE,
            a.AIRPORTIMAGE,
            c.cityname,
            a.cityid
        FROM AIRPORT a
        INNER JOIN CITY c ON a.cityid = c.id;

    DBMS_SQL.RETURN_RESULT(c_cursor);
END FetchAllAirports;


END AirPort_Package;

/
--------------------------------------------------------
--  DDL for Package Body BANK_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."BANK_PACKAGE" AS
  PROCEDURE PaymentCheck(
        p_CardNumber IN NUMBER,
        p_CVV IN NUMBER,
        p_ExpiryDate IN DATE,
        p_Balance IN NUMBER,
        p_Result OUT BOOLEAN
    ) IS
        v_AccountBalance NUMBER;
    BEGIN
        -- Check if account with provided details exists and fetch balance
        SELECT balance INTO v_AccountBalance
        FROM BANK
        WHERE CARDNUMBER = p_CardNumber
          AND cvv = p_CVV
          AND TRUNC(EXPIRYDATE) = TRUNC(p_ExpiryDate);

        -- Check if balance is sufficient for withdrawal
        IF v_AccountBalance >= p_Balance THEN
            -- Withdraw amount from account
            UPDATE BANK
            SET balance = balance - p_Balance
            WHERE CARDNUMBER = p_CardNumber
              AND cvv = p_CVV
              AND TRUNC(EXPIRYDATE) = TRUNC(p_ExpiryDate);

            -- Commit the transaction
            COMMIT;

            -- Indicate successful transaction
            p_Result := TRUE;
        ELSE
            -- Insufficient balance
            p_Result := FALSE;
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            -- Account does not exist or details do not match
            p_Result := FALSE;
        WHEN OTHERS THEN
            -- Handle any other errors
            p_Result := FALSE;
    END PaymentCheck;

END BANK_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body CITY_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."CITY_PKG" AS 

    PROCEDURE CREATE_CITY(p_CityName IN VARCHAR2, p_CityImage IN VARCHAR2, p_CountryId IN NUMBER) AS
    BEGIN
        INSERT INTO City (CityName, CityImage, CountryId)
        VALUES (p_CityName, p_CityImage, p_CountryId);

        COMMIT;
    END CREATE_CITY;

    PROCEDURE UPDATE_CITY(p_Id IN NUMBER, p_CityName IN VARCHAR2, p_CityImage IN VARCHAR2, p_CountryId IN NUMBER) AS
    BEGIN
        UPDATE City 
        SET CityName = p_CityName, 
            CityImage = p_CityImage, 
            CountryId = p_CountryId
        WHERE Id = p_Id;

        COMMIT;
    END UPDATE_CITY;

    PROCEDURE DELETE_CITY(p_Id IN NUMBER) AS
    BEGIN
        DELETE FROM City WHERE Id = p_Id;

        COMMIT;
    END DELETE_CITY;

    PROCEDURE GET_ALL_CITIES AS
        v_Cities SYS_REFCURSOR;
    BEGIN
        OPEN v_Cities FOR 
        SELECT * FROM City;

        DBMS_SQL.RETURN_RESULT(v_Cities);
    END GET_ALL_CITIES;

    PROCEDURE GET_CITY_BY_ID(p_Id IN NUMBER) AS
        c_all SYS_REFCURSOR;
    BEGIN
        open c_all for
        SELECT CityName, CityImage, CountryId
        FROM City 
        WHERE Id = p_Id;

        DBMS_SQL.RETURN_RESULT(c_all);
    END GET_CITY_BY_ID;

    PROCEDURE GET_CITIES_BY_COUNTRY(p_CountryId IN NUMBER) AS
        v_Cities SYS_REFCURSOR;
    BEGIN
        OPEN v_Cities FOR 
        SELECT * FROM City
        WHERE CountryId = p_CountryId;

        DBMS_SQL.RETURN_RESULT(v_Cities);
    END GET_CITIES_BY_COUNTRY;

END CITY_PKG;

/
--------------------------------------------------------
--  DDL for Package Body CONTACTMESSAGE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."CONTACTMESSAGE_PKG" AS 

PROCEDURE GetAll AS
        c_item SYS_REFCURSOR;
    BEGIN
        OPEN c_item FOR 
        SELECT * FROM contact_messages;

        DBMS_SQL.RETURN_RESULT(c_item);
    END GetAll;


 PROCEDURE CreateContactMessage(p_FirstName IN VARCHAR2, p_LastName IN VARCHAR2, p_Email IN VARCHAR2, p_message CLOB) AS
    BEGIN

        INSERT INTO contact_messages (FirstName, LastName, Email, message)
        VALUES (p_FirstName, p_LastName, p_Email, p_message);

        COMMIT;
    END CreateContactMessage;

END contactMessage_pkg;

/
--------------------------------------------------------
--  DDL for Package Body CONTACT_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."CONTACT_PKG" AS 

PROCEDURE GetAll AS
        c_item SYS_REFCURSOR;
    BEGIN
        OPEN c_item FOR 
        SELECT * FROM contactus;

        DBMS_SQL.RETURN_RESULT(c_item);
    END GetAll;


    PROCEDURE UpdateContact(p_Id IN NUMBER, contact_email IN VARCHAR2, contact_phone IN VARCHAR2, contact_address IN varchar2) AS
    BEGIN
        UPDATE contactus 
        SET contactemail = contact_email, 
            contactphone = contact_phone, 
            contactaddress = contact_address
        WHERE Id = p_Id;

        COMMIT;
    END UpdateContact;

END contact_pkg;

/
--------------------------------------------------------
--  DDL for Package Body COUNTRY_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."COUNTRY_PKG" AS 

    PROCEDURE CREATE_COUNTRY(p_CountryName IN VARCHAR2) AS
    BEGIN
        INSERT INTO Country (CountryName) 
        VALUES (p_CountryName);

        COMMIT;
    END CREATE_COUNTRY;

    PROCEDURE UPDATE_COUNTRY(p_Id IN NUMBER, p_CountryName IN VARCHAR2) AS
    BEGIN
        UPDATE Country 
        SET CountryName = p_CountryName
        WHERE Id = p_Id;

        COMMIT;
    END UPDATE_COUNTRY;

    PROCEDURE DELETE_COUNTRY(p_Id IN NUMBER) AS
    BEGIN
        DELETE FROM Country 
        WHERE Id = p_Id;

        COMMIT;
    END DELETE_COUNTRY;

    PROCEDURE GET_ALL_COUNTRIES AS 
        T_all SYS_REFCURSOR;
    BEGIN
        OPEN T_all FOR
        SELECT * FROM Country;

        DBMS_SQL.RETURN_RESULT(T_all);
    END GET_ALL_COUNTRIES;

    PROCEDURE GET_COUNTRY_BY_ID(p_Id IN NUMBER) AS
        v_CountryName SYS_REFCURSOR;
    BEGIN
        open v_CountryName for
        SELECT CountryName 
        FROM Country 
        WHERE Id = p_Id;

        DBMS_SQL.RETURN_RESULT(v_CountryName);
    END GET_COUNTRY_BY_ID;

END COUNTRY_PKG;

/
--------------------------------------------------------
--  DDL for Package Body DEGREE_FACILITY_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."DEGREE_FACILITY_PACKAGE" as

PROCEDURE CreateDegreeFacility(Degree_id in number, Facility_id in number)
AS
BEGIN
    INSERT INTO degree_facilities (id , DegreeId, FacilityId) 
    VALUES(default, Degree_id, Facility_id);
    COMMIT;
END CreateDegreeFacility;
--
PROCEDURE UpdateDegreeFacility(dfid in NUMBER, Degree_id in number, Facility_id in number)
AS
    BEGIN
    Update degree_facilities SET DegreeId = Degree_id, FacilityId = Facility_id
    WHERE id = dfid;
    COMMIT;
END UpdateDegreeFacility;
--
PROCEDURE DeleteDegreeFacility(dfid IN NUMBER)
AS
    BEGIN
    DELETE degree_facilities WHERE id = dfid;
    COMMIT;
END DeleteDegreeFacility;
PROCEDURE GetAvailableFacilitiesForDegree(Degree_id IN NUMBER)
AS
 FacilityList  SYS_REFCURSOR;
BEGIN
  OPEN FacilityList FOR
    SELECT f.id, f.FacilityName
    FROM Facility f
    WHERE f.id  NOT IN (
      SELECT df.facilityid
      FROM Degree_Facilities df
      WHERE df.Degreeid = Degree_id
    );
    DBMS_SQL.RETURN_RESULT(FacilityList);
END;


End degree_facility_Package;

/
--------------------------------------------------------
--  DDL for Package Body DEGREE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."DEGREE_PACKAGE" as
PROCEDURE CreateDegree(Degree_Name in varchar2)
AS
BEGIN
    INSERT INTO degree (id , DegreeName ) 
    VALUES(default, Degree_Name);
    COMMIT;
END CreateDegree;
--
PROCEDURE UpdateDegree(degid in NUMBER, Degree_Name in varchar2)
AS
    BEGIN
    Update degree SET DegreeName = Degree_Name
    WHERE id = degid;
    COMMIT;
END UpdateDegree;
--
PROCEDURE DeleteDegree(degid IN NUMBER)
AS
    BEGIN
    DELETE degree WHERE id = degid;
    COMMIT;
END DeleteDegree;
PROCEDURE GetAllDegrees
AS
    c_all SYS_REFCURSOR;
BEGIN
    OPEN c_all FOR
    SELECT d.id, d.DEGREENAME 
    FROM Degree d;
    
    DBMS_SQL.RETURN_RESULT(c_all);
END GetAllDegrees;

End degree_Package;

/
--------------------------------------------------------
--  DDL for Package Body FACILITY_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."FACILITY_PACKAGE" as

PROCEDURE GetAllFacility
AS
    c_all sys_refcursor;
    BEGIN
    open c_all for select * from Facility;
    Dbms_sql.return_result(c_all);
END GetAllFacility;

PROCEDURE CreateFacility(Facility_Name in varchar2, Facility_image in varchar2)
AS
BEGIN
    INSERT INTO Facility (id , FacilityName, FacilityImage) 
    VALUES(default, Facility_Name, Facility_image);
    COMMIT;
END CreateFacility;
--
PROCEDURE UpdateFacility(facid in NUMBER, Facility_Name in varchar2, Facility_image in varchar2)
AS
    BEGIN
    Update Facility SET FacilityName = Facility_Name, FacilityImage = Facility_image
    WHERE id = facid;
    COMMIT;
END UpdateFacility;
--
PROCEDURE DeleteFacility(facid IN NUMBER)
AS
    BEGIN
    DELETE Facility WHERE id = facid;
    COMMIT;
END DeleteFacility;

End facility_Package;

/
--------------------------------------------------------
--  DDL for Package Body FLIGHT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."FLIGHT_PACKAGE" AS

    PROCEDURE GetAllFlightsData AS
        c_cursor SYS_REFCURSOR;
    BEGIN
        OPEN c_cursor FOR
        SELECT 
            f.Id,
            f.FlightNumber,
            f.Capacity,
            f.PricePerPassenger,
            f.DepartureDate,
            f.DestinationDate,
            f.Status,
            f.DiscountValue,
            a.AirlineName,
            a.AirlineImage,
            dep_airport.AirportName,
            dep_airport.IATACode,
            dep_airport.Longitude,
            dep_airport.Latitude,
            dep_city.CityName,
            dest_airport.AirportName,
            dest_airport.IATACode,
            dest_airport.Longitude,
            dest_airport.Latitude,
            dest_city.CityName,
            d.DegreeName
        FROM Flight f
        JOIN Airlines a ON f.AirlineId = a.Id
        JOIN Airport dep_airport ON f.DepartureAirportId = dep_airport.Id
        JOIN City dep_city ON dep_airport.CityId = dep_city.Id
        JOIN Airport dest_airport ON f.DestinationAirportId = dest_airport.Id
        JOIN City dest_city ON dest_airport.CityId = dest_city.Id
        LEFT JOIN Degree d ON f.DegreeId = d.Id;

        DBMS_SQL.RETURN_RESULT(c_cursor);
    END GetAllFlightsData;

    PROCEDURE CreateFlight(
        p_FlightNumber VARCHAR2,
        p_Capacity NUMBER,
        p_price NUMBER,
        p_Departure_Date DATE,
        p_Destination_Date DATE,
        p_DiscountValue NUMBER,
        p_AirLineID NUMBER,
        p_DepartureAirportID NUMBER,
        p_DestinationAirportID NUMBER,
        p_DegreeID NUMBER,
        p_PriceAfterDiscount NUMBER
    ) AS
    BEGIN
        INSERT INTO FLIGHT (
            FLIGHTNUMBER,
            CAPACITY,
            PRICEPERPASSENGER,
            DEPARTUREDATE,
            DESTINATIONDATE,
            STATUS,
            DISCOUNTVALUE,
            AIRLINEID,
            DEPARTUREAIRPORTID,
            DESTINATIONAIRPORTID,
            DEGREEID,
            PRICEAFTERDISCOUNT
        ) VALUES (
            p_FlightNumber,
            p_Capacity,
            p_price,
            p_Departure_Date,
            p_Destination_Date,
            'Scheduled',
            p_DiscountValue,
            p_AirLineID,
            p_DepartureAirportID,
            p_DestinationAirportID,
            p_DegreeID,
            p_PriceAfterDiscount 
        );
        COMMIT;
    END CreateFlight;

    PROCEDURE UpdateFlight(
        p_ID NUMBER,
        p_FlightNumber VARCHAR2,
        p_Capacity NUMBER,
        p_price NUMBER,
        p_Departure_Date DATE,
        p_Destination_Date DATE,
        p_DiscountValue NUMBER,
        p_AirLineID NUMBER,
        p_DepartureAirportID NUMBER,
        p_DestinationAirportID NUMBER,
        p_DegreeID NUMBER,
         p_PriceAfterDiscount NUMBER

    ) AS
    BEGIN
        UPDATE FLIGHT
        SET
            FLIGHTNUMBER = p_FlightNumber,
            CAPACITY = p_Capacity,
            PRICEPERPASSENGER = p_price,
            DEPARTUREDATE = p_Departure_Date,
            DESTINATIONDATE = p_Destination_Date,
            DISCOUNTVALUE = p_DiscountValue,
            AIRLINEID = p_AirLineID,
            DEPARTUREAIRPORTID = p_DepartureAirportID,
            DESTINATIONAIRPORTID = p_DestinationAirportID,
            DEGREEID = p_DegreeID,
            STATUS = 'Scheduled',
            PRICEAFTERDISCOUNT = p_PriceAfterDiscount
        WHERE id = p_ID;
        COMMIT;
    END UpdateFlight;

    PROCEDURE DeleteFlight(p_ID IN NUMBER) AS
    BEGIN
        DELETE FROM FLIGHT WHERE ID = p_ID;
        COMMIT;
    END DeleteFlight;

    PROCEDURE FetchFlightByID(p_ID IN NUMBER) IS
        c_cursor SYS_REFCURSOR;
    BEGIN
        OPEN c_cursor FOR
        SELECT 
            f.Id,
            f.FlightNumber,
            f.Capacity,
            f.PricePerPassenger,
            f.DepartureDate,
            f.DestinationDate,
            f.Status,
            f.DiscountValue,
            a.AirlineName,
            a.AirlineImage,
            dep_airport.AirportName AS DepartureAirportName,
            dep_airport.IATACode AS DepartureIATACode,
            dep_airport.Longitude AS DepartureLongitude,
            dep_airport.Latitude AS DepartureLatitude,
            dep_city.CityName AS DepartureCityName,
            dest_airport.AirportName AS DestinationAirportName,
            dest_airport.IATACode AS DestinationIATACode,
            dest_airport.Longitude AS DestinationLongitude,
            dest_airport.Latitude DestinationLatitude,
            dest_city.CityName DestinationCityName,
            d.DegreeName
        FROM Flight f
        JOIN Airlines a ON f.AirlineId = a.Id
        JOIN Airport dep_airport ON f.DepartureAirportId = dep_airport.Id
        JOIN City dep_city ON dep_airport.CityId = dep_city.Id
        JOIN Airport dest_airport ON f.DestinationAirportId = dest_airport.Id
        JOIN City dest_city ON dest_airport.CityId = dest_city.Id
        JOIN Degree d ON f.DegreeId = d.Id
        WHERE f.Id = p_ID;

        DBMS_SQL.RETURN_RESULT(c_cursor);
    END FetchFlightByID;

    PROCEDURE FetchFlightByFlightNumber(p_FlightNumber IN VARCHAR2) IS
        c_cursor SYS_REFCURSOR;
    BEGIN
        OPEN c_cursor FOR
        SELECT 
            f.Id, 
            f.FlightNumber,
            f.Capacity,
            f.PricePerPassenger,
            f.DepartureDate,
            f.DestinationDate,
            f.Status,
            f.DiscountValue,
            a.AirlineName,
            a.AirlineImage,
            dep_airport.AirportName AS DepartureAirportName,
            dep_airport.IATACode AS DepartureIATACode,
            dep_airport.Longitude AS DepartureLongitude,
            dep_airport.Latitude AS DepartureLatitude,
            dep_city.CityName AS DepartureCityName,
            dest_airport.AirportName AS DestinationAirportName,
            dest_airport.IATACode AS DestinationIATACode,
            dest_airport.Longitude AS DestinationLongitude,
            dest_airport.Latitude DestinationLatitude,
            dest_city.CityName DestinationCityName,
            d.DegreeName
        FROM Flight f
        JOIN Airlines a ON f.AirlineId = a.Id
        JOIN Airport dep_airport ON f.DepartureAirportId = dep_airport.Id
        JOIN City dep_city ON dep_airport.CityId = dep_city.Id
        JOIN Airport dest_airport ON f.DestinationAirportId = dest_airport.Id
        JOIN City dest_city ON dest_airport.CityId = dest_city.Id
        JOIN Degree d ON f.DegreeId = d.Id
        WHERE f.FlightNumber = p_FlightNumber;

        DBMS_SQL.RETURN_RESULT(c_cursor);
    END FetchFlightByFlightNumber;
    
    
     PROCEDURE FetchAllFlights IS 
       c_cursor SYS_REFCURSOR;
    BEGIN
        OPEN c_cursor FOR
        SELECT 
            f.Id,
            f.FlightNumber,
            f.Capacity,
            f.PricePerPassenger,
            f.DepartureDate,
            f.DestinationDate,
            f.Status,
            f.DiscountValue,
            f.PRICEAFTERDISCOUNT,
            a.AirlineName,
            a.AirlineImage,
            dep_airport.AirportName AS DepartureAirportName,
            dep_airport.IATACode AS DepartureIATACode,
            dep_airport.Longitude AS DepartureLongitude,
            dep_airport.Latitude AS DepartureLatitude,
            dep_city.CityName AS DepartureCityName,
            dest_airport.AirportName AS DestinationAirportName,
            dest_airport.IATACode AS DestinationIATACode,
            dest_airport.Longitude AS DestinationLongitude,
            dest_airport.Latitude DestinationLatitude,
            dest_city.CityName DestinationCityName,
            d.DegreeName
        FROM Flight f
        JOIN Airlines a ON f.AirlineId = a.Id
        JOIN Airport dep_airport ON f.DepartureAirportId = dep_airport.Id
        JOIN City dep_city ON dep_airport.CityId = dep_city.Id
        JOIN Airport dest_airport ON f.DestinationAirportId = dest_airport.Id
        JOIN City dest_city ON dest_airport.CityId = dest_city.Id
        JOIN Degree d ON f.DegreeId = d.Id;
     DBMS_SQL.RETURN_RESULT(c_cursor);
     END FetchAllFlights;
     
     
PROCEDURE SearchForFlights(
    p_DepartureCityID IN NUMBER,
    p_DestinationCityID IN NUMBER,
    p_DepartureDate IN DATE,
    p_ClassTypeID IN NUMBER
) IS
    c_cursor SYS_REFCURSOR;
BEGIN
    OPEN c_cursor FOR
    SELECT 
        a.AirlineName,
        a.AirlineImage,
          dep_airport.AirportName AS DepartureAirportName,
        dep_airport.IATACode AS DepartureIATACode,
        dest_airport.IATACode AS DestinationIATACode,
        dest_airport.AirportName AS DestinationAirportName,
        dep_city.CityName AS DepartureCityName,
        dep_country.CountryName AS DepartureCountryName,
        dest_city.CityName AS DestinationCityName,
        dest_country.CountryName AS DestinationCountryName,
        d.DegreeName,
        f.PricePerPassenger AS Price,
        f.DepartureDate,
        f.DestinationDate,
        f.id AS FlightId,
        f.flightnumber AS FlightNumber,
        f.discountvalue AS Discountvalue,
        f.PRICEAFTERDISCOUNT AS PriceAfterDiscount, 
        d.id AS DegreeId
    FROM Flight f
    JOIN Airlines a ON f.AirlineId = a.Id
    JOIN Airport dep_airport ON f.DepartureAirportId = dep_airport.Id
    JOIN City dep_city ON dep_airport.CityId = dep_city.Id
    JOIN Country dep_country ON dep_city.CountryId = dep_country.Id -- Join for departure country
    JOIN Airport dest_airport ON f.DestinationAirportId = dest_airport.Id
    JOIN City dest_city ON dest_airport.CityId = dest_city.Id
    JOIN Country dest_country ON dest_city.CountryId = dest_country.Id -- Join for destination country
    JOIN Degree d ON f.DegreeId = d.Id
    WHERE (p_DepartureCityID IS NULL OR dep_city.Id = p_DepartureCityID) -- Handle null for departure city
      AND (p_DestinationCityID IS NULL OR dest_city.Id = p_DestinationCityID) -- Handle null for destination city
      AND (p_DepartureDate IS NULL OR TRUNC(f.DepartureDate) = p_DepartureDate) -- Handle null for departure date
      AND (p_ClassTypeID IS NULL OR d.Id = p_ClassTypeID)-- Handle null for class type
      AND f.DepartureDate > SYSDATE;
    DBMS_SQL.RETURN_RESULT(c_cursor);
END SearchForFlights;


PROCEDURE FetchAllFacilitesByDegreeId (p_Degreeid Number)
AS 
c_all SYS_REFCURSOR;
BEGIN
open c_all for
Select
f.facilityname 
,f.facilityimage ,
df.id as degreefacilityID

From Facility f
JOIN Degree_Facilities df ON f.id = df.facilityid
JOIN Degree d ON d.id = df.degreeid
Where d.id = p_Degreeid;
DBMS_SQL.RETURN_RESULT(c_all);
END FetchAllFacilitesByDegreeId;
PROCEDURE GetAllFlightsByAirlineID(p_AirlineID IN NUMBER) IS
        c_cursor SYS_REFCURSOR;
    BEGIN
        OPEN c_cursor FOR
        SELECT 
            f.Id,
            f.FlightNumber,
            f.Capacity,
            f.PricePerPassenger,
            f.DepartureDate,
            f.DestinationDate,
            f.Status,
            f.DiscountValue,
            a.AirlineName,
            a.AirlineImage,
            dep_airport.AirportName AS DepartureAirportName,
            dep_airport.IATACode AS DepartureIATACode,
            dest_airport.AirportName AS DestinationAirportName,
            dest_airport.IATACode AS DestinationIATACode,
            d.DegreeName
        FROM Flight f
        JOIN Airlines a ON f.AirlineId = a.Id
        JOIN Airport dep_airport ON f.DepartureAirportId = dep_airport.Id
        JOIN Airport dest_airport ON f.DestinationAirportId = dest_airport.Id
        LEFT JOIN Degree d ON f.DegreeId = d.Id
        WHERE f.AirlineId = p_AirlineID;

        DBMS_SQL.RETURN_RESULT(c_cursor);
    END GetAllFlightsByAirlineID;
        
    
END Flight_Package;

/
--------------------------------------------------------
--  DDL for Package Body HOME_PAGE_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."HOME_PAGE_PKG" AS 

PROCEDURE GetAll AS
        c_item SYS_REFCURSOR;
    BEGIN
        OPEN c_item FOR 
        SELECT * FROM home;

        DBMS_SQL.RETURN_RESULT(c_item);
    END GetAll;


    PROCEDURE UpdateHome(p_Id IN NUMBER, home_title IN VARCHAR2, home_content IN VARCHAR2, home_image IN varchar2) AS
    BEGIN
        UPDATE home 
        SET hometitle = home_title, 
            homecontent = home_content, 
            homeimage = home_image
        WHERE Id = p_Id;

        COMMIT;
    END UpdateHome;

END home_page_pkg;

/
--------------------------------------------------------
--  DDL for Package Body LOGIN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."LOGIN_PACKAGE" 
AS
PROCEDURE User_Login(user_name IN VARCHAR,pass IN VARCHAR)
AS
c_all SYS_REFCURSOR;
BEGIN
    open c_all for
    SELECT username,roleid, userid, airlineid,u.email
    FROM LOGIN l
    JOIN Users u ON l.userid = u.id
    WHERE username = user_name AND password = pass;
    DBMS_SQL.RETURN_RESULT(c_all);
end User_Login;
PROCEDURE Airline_Login(user_name IN VARCHAR,pass IN VARCHAR)
AS
c_all SYS_REFCURSOR;
BEGIN
    open c_all for
    SELECT username,roleid, airlineid
    FROM LOGIN l 
    JOIN airlines a ON l.Airlineid = a.id
    WHERE username =user_name AND password = pass AND a.activationstatus = 'Approved';
    DBMS_SQL.RETURN_RESULT(c_all);
     END Airline_Login;

END Login_Package;

/
--------------------------------------------------------
--  DDL for Package Body PARTENER_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."PARTENER_PKG" AS

 PROCEDURE CreatePartner(
    F_Name IN VARCHAR2,
    L_NAME IN VARCHAR2,
    NATIONAL_NUM IN VARCHAR2,
    U_ID IN NUMBER
) AS
BEGIN
    INSERT INTO Partner(FIRSTNAME, LASTNAME,NATIONALNUMBER,USERID)
    VALUES (F_NAME,L_NAME,NATIONAL_NUM,U_ID);

    COMMIT;
END CreatePartner;




 PROCEDURE GetPartnersByUser(
    p_UserId IN NUMBER
) AS
    v_partners SYS_REFCURSOR;
BEGIN
    OPEN v_partners FOR
        SELECT
        p.id,
        P.FIRSTNAME AS PartnerFirstName,
        P.LASTNAME AS PartnerLastName,
        P.NATIONALNUMBER,
        U.FIRSTNAME AS UserFirstName,
        U.LASTNAME AS UserLastName,
        p.userid

        FROM Partner P 
        JOIN USERS U ON U.ID= P.USERID

        WHERE P.UserId = p_UserId;

    DBMS_SQL.RETURN_RESULT(v_partners);
END GetPartnersByUser;



END PARTENER_PKG;

/
--------------------------------------------------------
--  DDL for Package Body RESERVATION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."RESERVATION_PACKAGE" AS

    PROCEDURE CreateReservation(
        p_ReservationDate DATE,
        p_TotalPrice NUMBER,
        p_NumOfPassengers NUMBER,
        p_UserID NUMBER,
        p_FlightID NUMBER
    ) AS
    BEGIN
        INSERT INTO RESERVATION (
            RESERVATIONDATE,
            TOTALPRICE,
            NUMOFPASSENGERS,
            USERID,
            FLIGHTID
        ) VALUES (
            p_ReservationDate,
            p_TotalPrice,
            p_NumOfPassengers,
            p_UserID,
            p_FlightID
        );
        COMMIT;
    END CreateReservation;

    PROCEDURE FetchReservationsByUserID(p_UserID NUMBER) IS
        c_cursor SYS_REFCURSOR;
    BEGIN
        OPEN c_cursor FOR
        SELECT 
            r.ID,
            r.RESERVATIONDATE,
            r.TOTALPRICE,
            r.NUMOFPASSENGERS,
            u.FirstName,
            u.LastName,
            f.FlightNumber,
            f.DepartureDate,
            f.DestinationDate
        FROM RESERVATION r
        JOIN USERS u ON r.USERID = u.ID
        JOIN FLIGHT f ON r.FLIGHTID = f.ID
        WHERE r.USERID = p_UserID;

        DBMS_SQL.RETURN_RESULT(c_cursor);
    END FetchReservationsByUserID;
    
    
        PROCEDURE FetchReservationsByID(p_id NUMBER)
        IS
          c_cursor SYS_REFCURSOR;
    BEGIN
        OPEN c_cursor FOR
        SELECT 
            r.ID,
            r.RESERVATIONDATE,
            r.TOTALPRICE,
            r.NUMOFPASSENGERS,
            u.FirstName,
            u.LastName,
            f.FlightNumber,
            f.DepartureDate,
            f.DestinationDate
        FROM RESERVATION r
        JOIN USERS u ON r.USERID = u.ID
        JOIN FLIGHT f ON r.FLIGHTID = f.ID
        WHERE r.id = p_id;
        DBMS_SQL.RETURN_RESULT(c_cursor);
        END FetchReservationsByID;
        


    -- Procedure to fetch all reservations
    PROCEDURE FetchAllReservations IS
        c_cursor SYS_REFCURSOR;
    BEGIN
        OPEN c_cursor FOR
        SELECT 
            r.ID,
            r.RESERVATIONDATE,
            r.TOTALPRICE,
            r.NUMOFPASSENGERS,
            u.FirstName,
            u.LastName,
            f.FlightNumber,
            f.DepartureDate,
            f.DestinationDate
        FROM RESERVATION r
        JOIN USERS u ON r.USERID = u.ID
        JOIN FLIGHT f ON r.FLIGHTID = f.ID;

        DBMS_SQL.RETURN_RESULT(c_cursor);
    END FetchAllReservations;
    PROCEDURE SearchReservation(fName in varchar2 , lName in varchar2, flightNum in varchar2, DateFrom in date , DateTo in date)
As
    Get_Cur SYS_REFCURSOR;
    Begin
    open Get_Cur for 
    select 
            r.ID,
            r.RESERVATIONDATE,
            r.TOTALPRICE,
            r.NUMOFPASSENGERS,
            u.FirstName,
            u.LastName,
            f.FlightNumber,
            f.DepartureDate,
            f.DestinationDate
    from RESERVATION r
    join USERS u ON r.USERID = u.ID
    join FLIGHT f ON r.FLIGHTID = f.ID
    where (upper(u.FirstName) like '%'||upper(fName) ||'%') -- null
    And (upper(u.LastName) like '%' || upper( lName) || '%') -- S
    And (flightNum is null or upper(f.FlightNumber) = upper(flightNum))
    And ((DateFrom IS NULL AND DateTo IS NULL) -- If both dates are NULL, return all
        OR (DateFrom IS NOT NULL AND DateTo IS NULL AND r.RESERVATIONDATE >= DateFrom) -- From specific date onwards
        OR (DateTo IS NOT NULL AND DateFrom IS NULL AND r.RESERVATIONDATE <= DateTo) -- Up to specific date
        OR (DateFrom IS NOT NULL AND DateTo IS NOT NULL AND r.RESERVATIONDATE BETWEEN DateFrom AND DateTo) -- Between DateFrom and DateTo
    );
    dbms_sql.return_result(Get_Cur);
End SearchReservation;
 PROCEDURE GetMonthlyTotalPrice (
    from_date IN DATE,
    to_date IN DATE
)
AS
    Get_Cur SYS_REFCURSOR;
BEGIN
    OPEN Get_Cur FOR
    SELECT 
        TO_CHAR(RESERVATIONDATE, 'YYYY-MM') AS month,
        SUM(TOTALPRICE) AS total_price
    FROM 
        Reservation
    WHERE 
        RESERVATIONDATE BETWEEN from_date AND to_date
    GROUP BY 
        TO_CHAR(RESERVATIONDATE, 'YYYY-MM')
    ORDER BY 
        TO_CHAR(RESERVATIONDATE, 'YYYY-MM');
    
    -- Use DBMS_SQL.RETURN_RESULT to return the cursor result to the caller
    DBMS_SQL.RETURN_RESULT(Get_Cur);
    
END;
PROCEDURE GetEntityCounts(
    p_airports OUT NUMBER,
    p_users OUT NUMBER,
    p_reservations OUT NUMBER,
    p_airlines OUT NUMBER
) AS
BEGIN
    -- Assign values directly to the OUT parameters
    SELECT COUNT(*) INTO p_airports FROM airport;
    SELECT COUNT(*) INTO p_users FROM Users;
    SELECT COUNT(*) INTO p_reservations FROM Reservation;
    SELECT COUNT(*) INTO p_airlines FROM Airlines;
END;
 PROCEDURE FetchReservationsByAirline(p_id NUMBER)
        IS
          c_cursor SYS_REFCURSOR;
    BEGIN
        OPEN c_cursor FOR
        SELECT 
            r.ID,
            r.RESERVATIONDATE,
            r.TOTALPRICE,
            r.NUMOFPASSENGERS,
            u.FirstName,
            u.LastName,
            f.FlightNumber,
            f.DepartureDate,
            f.DestinationDate
        FROM RESERVATION r
        JOIN USERS u ON r.USERID = u.ID
        JOIN FLIGHT f ON r.FLIGHTID = f.ID
        JOIN AIRLINES a ON f.AIRLINEID = a.ID
        WHERE a.id = p_id;
        DBMS_SQL.RETURN_RESULT(c_cursor);
        
END FetchReservationsByAirline;

PROCEDURE GetMonthlyReport(
    reportMonth IN NUMBER, 
    reportYear IN NUMBER
     
)
IS
 reportCursor  SYS_REFCURSOR;
BEGIN
    OPEN reportCursor FOR 
        SELECT 
            TO_CHAR(r.reservationdate, 'YYYY-MM-DD') AS ReservationDate,
            u.firstname, 
            u.lastname, 
            f.flightnumber, 
            f.departuredate, 
            f.destinationdate, 
            r.numofpassengers, 
            r.totalprice
        FROM reservation r
        JOIN users u ON r.userid = u.id  
        JOIN flight f ON r.flightid = f.id 
        WHERE EXTRACT(MONTH FROM r.reservationdate) = reportMonth
        AND EXTRACT(YEAR FROM r.reservationdate) = reportYear;
           DBMS_SQL.RETURN_RESULT(reportCursor);
END;




 PROCEDURE GetAnnualReport(reportYear IN NUMBER)
IS
  annualCursor  SYS_REFCURSOR;
BEGIN
OPEN annualCursor FOR 
    SELECT 
        TO_CHAR(r.reservationdate, 'YYYY-MM-DD') AS ReservationDate,
        u.firstname, 
        u.lastname, 
        f.flightnumber, 
        f.departuredate, 
        f.destinationdate, 
        r.numofpassengers, 
        r.totalprice
    FROM reservation r
    JOIN users u ON r.userid = u.id   
    JOIN flight f ON r.flightid = f.id  
    WHERE EXTRACT(YEAR FROM r.reservationdate) = reportYear;
       DBMS_SQL.RETURN_RESULT(annualCursor);
END;

END Reservation_Package;

/
--------------------------------------------------------
--  DDL for Package Body TESTIMONIALS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."TESTIMONIALS_PKG" AS 

PROCEDURE CREATE_TESTIMONIAL(T_content in VARCHAR2, T_rating in number , T_date in date, T_status in VARCHAR2, User_id in number)as
begin 
INSERT INTO Testimonial ( testimonialcontent, rating  , testimonialdate, testimonialstatus, Userid)
    VALUES ( T_content,T_rating ,T_date, T_status, User_id);

    COMMIT;
end CREATE_TESTIMONIAL;

PROCEDURE DELETE_TESTIMONIAL(T_id in number)
as
begin 
DELETE FROM Testimonial WHERE id = T_id;

    COMMIT;
end DELETE_TESTIMONIAL;

PROCEDURE GET_ALL_TESTIMONIALS as 
T_all SYS_REFCURSOR ;
begin 
open T_all for
select 
T.ID,
T.TESTIMONIALCONTENT,
T.RATING ,
T.TESTIMONIALDATE,
T.TESTIMONIALSTATUS, 
U.FIRSTNAME,
U.LASTNAME,
U.IMAGE
from testimonial T 
JOIN USERS U ON U.ID= T.USERID;
DBMS_SQL.RETURN_RESULT(T_all);
end GET_ALL_TESTIMONIALS;


PROCEDURE CHANGE_TESTIMONIAL_STATUS(T_id in  number, T_status in VARCHAR2) AS
BEGIN 
 UPDATE Testimonial
    SET TestimonialStatus = T_status
    WHERE id = T_id;

    COMMIT;
END CHANGE_TESTIMONIAL_STATUS;

end TESTIMONIALS_PKG;

/
--------------------------------------------------------
--  DDL for Package Body USER_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FLIGHT"."USER_PKG" 
as
PROCEDURE CreateUser (
        p_FirstName IN VARCHAR2,
        p_LastName IN VARCHAR2,
        p_Email IN VARCHAR2,
        p_Phone IN VARCHAR2,
        p_DateOfBirth IN DATE,
        p_Image IN VARCHAR2,
        p_NationalNumber IN VARCHAR2,
        p_Username IN VARCHAR2,         
        p_Password IN VARCHAR2,         
        p_RoleId IN NUMBER 
      
        
    ) AS
        v_UserId NUMBER;
    BEGIN

        INSERT INTO Users (FirstName, LastName, Email, Phone, DateOfBirth, Image, NationalNumber)
        VALUES (p_FirstName, p_LastName, p_Email, p_Phone, p_DateOfBirth, p_Image, p_NationalNumber)
        RETURNING ID INTO v_UserId;  


        DBMS_OUTPUT.PUT_LINE('Generated UserId: ' || v_UserId);

        -- Insert into Login table using the generated UserId
        INSERT INTO Login (Username, Password, RoleId, userid)
        VALUES (p_Username, p_Password, p_RoleId, v_UserId);

        COMMIT;
    END CreateUser;


 PROCEDURE  UpdateUser(
    p_ID IN NUMBER,            
    p_FirstName IN VARCHAR2,
    p_LastName IN VARCHAR2,
    p_Email IN VARCHAR2,
    p_Phone IN VARCHAR2,
    p_DateOfBirth IN DATE,
    p_Image IN VARCHAR2,
    p_NationalNumber IN VARCHAR2,  
    p_Username IN VARCHAR2,        
    p_Password IN VARCHAR2       

) AS
BEGIN
    -- Update Users table
    UPDATE users
    SET
        FirstName = p_FirstName,
        LastName = p_LastName,
        Email = p_Email,
        Phone = p_Phone,
        DateOfBirth = p_DateOfBirth,
        Image = p_Image,
        NationalNumber = p_NationalNumber
    WHERE ID = p_ID;     

    UPDATE Login
    SET
        Username = p_Username,
        Password = p_Password
    WHERE userid = p_ID;       

    COMMIT;                       
END  UpdateUser;

PROCEDURE GetAllUsers AS
    U_all SYS_REFCURSOR;
BEGIN
    OPEN U_all FOR
    SELECT 
        u.ID,
        u.FirstName,
        u.LastName,
        u.Email,
        u.Phone,
        u.DateOfBirth,
        u.Image,
        u.NationalNumber,
        l.Username  
    FROM 
        Users u
    JOIN 
        Login l ON u.ID = l.Userid
        where l.roleid = 2;
    DBMS_SQL.RETURN_RESULT(U_all);
END GetAllUsers;



PROCEDURE GetUserById(U_ID IN NUMBER) AS
    U_all SYS_REFCURSOR;
BEGIN
    OPEN U_all FOR
    SELECT 
     u.ID,
        u.FirstName,
        u.LastName,
        u.Email,
        u.Phone,
        u.DateOfBirth,
        u.Image,
        u.NationalNumber,
        l.Username ,
        l.password,
        l.roleid
    FROM 
        Users u
    JOIN 
        Login l ON u.ID = l.Userid  
    WHERE 
        u.ID = U_ID;

    DBMS_SQL.RETURN_RESULT(U_all);
END GetUserById;
PROCEDURE CheckUserExists (
    p_Username IN VARCHAR2,
    p_Email IN VARCHAR2,
    p_Result OUT VARCHAR2
) AS
    v_Temp VARCHAR2(1); -- Temporary variable to hold query results
BEGIN
    BEGIN
        -- Try to select the username in the Login table
        SELECT 'X' INTO v_Temp
        FROM Login
        WHERE username = p_Username;

        -- If no exception was raised, username exists
        p_Result := 'username';
        RETURN;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            NULL; -- Username doesn't exist, continue to check email
    END;

    BEGIN
        -- Try to select the email in the Users table
        SELECT 'X' INTO v_Temp
        FROM Users
        WHERE email = p_Email;

        -- If no exception was raised, email exists
        p_Result := 'email';
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            -- Neither username nor email exists
            p_Result := 'none';
    END;
END CheckUserExists;

PROCEDURE GetUsersWithPartners AS
    U_all SYS_REFCURSOR;
BEGIN
    OPEN U_all FOR
    SELECT 
        u.ID,
        u.FirstName,
        u.LastName,
        u.Email,
        u.Phone,
        u.DateOfBirth,
        u.Image,
        u.NationalNumber,
        l.Username,
        l.roleid
    FROM 
        Users u
    JOIN 
        Login l ON u.ID = l.Userid
    WHERE 
        l.roleid = 2
        AND EXISTS (
            SELECT 1 
            FROM Partner p
            WHERE p.UserId = u.ID
        );

    DBMS_SQL.RETURN_RESULT(U_all);
END GetUsersWithPartners;


end user_pkg;

/
--------------------------------------------------------
--  Constraints for Table ABOUTUS
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."ABOUTUS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."ABOUTUS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AIRLINES
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."AIRLINES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."AIRLINES" ADD CHECK (ActivationStatus IN ('Pending', 'Approved', 'Denied')) ENABLE;
  ALTER TABLE "C##FLIGHT"."AIRLINES" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AIRPORT
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."AIRPORT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."AIRPORT" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BANK
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."BANK" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."BANK" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CITY
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."CITY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."CITY" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CONTACTUS
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."CONTACTUS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."CONTACTUS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CONTACT_MESSAGES
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."CONTACT_MESSAGES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."CONTACT_MESSAGES" MODIFY ("FIRSTNAME" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."CONTACT_MESSAGES" MODIFY ("LASTNAME" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."CONTACT_MESSAGES" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."CONTACT_MESSAGES" MODIFY ("MESSAGE" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."CONTACT_MESSAGES" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table COUNTRY
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."COUNTRY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."COUNTRY" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DEGREE
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."DEGREE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."DEGREE" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DEGREE_FACILITIES
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."DEGREE_FACILITIES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."DEGREE_FACILITIES" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table FACILITY
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."FACILITY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."FACILITY" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table FLIGHT
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."FLIGHT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."FLIGHT" ADD CHECK (Status IN ('Scheduled', 'Departed', 'In Air', 'Landed', 'Cancelled')) ENABLE;
  ALTER TABLE "C##FLIGHT"."FLIGHT" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table HOME
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."HOME" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."HOME" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table LOGIN
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."LOGIN" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."LOGIN" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PARTNER
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."PARTNER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."PARTNER" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table RESERVATION
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."RESERVATION" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."RESERVATION" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ROLE
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."ROLE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."ROLE" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TESTIMONIAL
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."TESTIMONIAL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."TESTIMONIAL" ADD CHECK (TestimonialStatus IN ('Pending', 'Approved', 'Denied')) ENABLE;
  ALTER TABLE "C##FLIGHT"."TESTIMONIAL" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."USERS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "C##FLIGHT"."USERS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table AIRPORT
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."AIRPORT" ADD FOREIGN KEY ("CITYID")
	  REFERENCES "C##FLIGHT"."CITY" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CITY
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."CITY" ADD FOREIGN KEY ("COUNTRYID")
	  REFERENCES "C##FLIGHT"."COUNTRY" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DEGREE_FACILITIES
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."DEGREE_FACILITIES" ADD FOREIGN KEY ("DEGREEID")
	  REFERENCES "C##FLIGHT"."DEGREE" ("ID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "C##FLIGHT"."DEGREE_FACILITIES" ADD FOREIGN KEY ("FACILITYID")
	  REFERENCES "C##FLIGHT"."FACILITY" ("ID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FLIGHT
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."FLIGHT" ADD FOREIGN KEY ("AIRLINEID")
	  REFERENCES "C##FLIGHT"."AIRLINES" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "C##FLIGHT"."FLIGHT" ADD FOREIGN KEY ("DEPARTUREAIRPORTID")
	  REFERENCES "C##FLIGHT"."AIRPORT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "C##FLIGHT"."FLIGHT" ADD FOREIGN KEY ("DESTINATIONAIRPORTID")
	  REFERENCES "C##FLIGHT"."AIRPORT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "C##FLIGHT"."FLIGHT" ADD FOREIGN KEY ("DEGREEID")
	  REFERENCES "C##FLIGHT"."DEGREE" ("ID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LOGIN
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."LOGIN" ADD FOREIGN KEY ("ROLEID")
	  REFERENCES "C##FLIGHT"."ROLE" ("ID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "C##FLIGHT"."LOGIN" ADD FOREIGN KEY ("USERID")
	  REFERENCES "C##FLIGHT"."USERS" ("ID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "C##FLIGHT"."LOGIN" ADD CONSTRAINT "SYS_C008756" FOREIGN KEY ("AIRLINEID")
	  REFERENCES "C##FLIGHT"."AIRLINES" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PARTNER
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."PARTNER" ADD FOREIGN KEY ("USERID")
	  REFERENCES "C##FLIGHT"."USERS" ("ID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table RESERVATION
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."RESERVATION" ADD FOREIGN KEY ("USERID")
	  REFERENCES "C##FLIGHT"."USERS" ("ID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "C##FLIGHT"."RESERVATION" ADD FOREIGN KEY ("FLIGHTID")
	  REFERENCES "C##FLIGHT"."FLIGHT" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TESTIMONIAL
--------------------------------------------------------

  ALTER TABLE "C##FLIGHT"."TESTIMONIAL" ADD FOREIGN KEY ("USERID")
	  REFERENCES "C##FLIGHT"."USERS" ("ID") ON DELETE SET NULL ENABLE;
